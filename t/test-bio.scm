
(define-test (test-bio)
  (let* ((fname ".tmp-test-arrays")
         (arr (gpu-make-vector 4))
         (n1 (random (ash 1 32)))
         (n2 (random (ash 1 32)))
         (str (format #f "~a" (random (ash 2 128))))
         (str2 (format #f "~a" (random (ash 2 128))))
         (lst (list n2 str 'hejsan #t (gpu-array arr) #f))
         (test-array (lambda (arv brv)
           (test-assert-arrays-equal (array->list arv)
                                     (map (lambda (rv) (gpu-array rv))
                                          (array->list brv))
                                     0.0000002))))
    (let ((arr (gpu-array arr)))
      (array-set! arr (random (ash 2 48)) 0)
      (array-set! arr (random (ash 2 48)) 1)
      (array-set! arr (random (ash 2 48)) 2)
      (array-set! arr (random (ash 2 48)) 3))
    (call-with-output-file fname
      (lambda (p)
        (bio-write-expr p n1)
        (bio-write-expr p str2)
        (bio-write-expr p 'hello)
        (bio-write-expr p lst)
        (bio-write-expr p '())
        (bio-write-expr p #f)
        (bio-write-expr p #t))
      #:encoding #f #:binary #t)
    (call-with-input-file fname
      (lambda (p)
        (test-assert (equal? (bio-read-expr p) n1)     "no-int")
        (test-assert (equal? (bio-read-expr p) str2)   "no-string")
        (test-assert (equal? (bio-read-expr p) 'hello) "no-symbol")
        (let ((x (bio-read-expr p)))
          (test-assert (equal? (list-ref x 0) n2) "bad-lst-ref-0")
          (test-assert (equal? (list-ref x 1) str) "bad-lst-ref-1")
          (test-assert (equal? (list-ref x 2) 'hejsan) "bad-lst-ref-2")
          (test-assert (equal? (list-ref x 3) #t) "bad-lst-ref-3")
          (test-assert-arrays-equal (list (list-ref x 4))
                                    (list (gpu-array arr))
                                    0.0000002)
          (test-assert (equal? (list-ref x 5) #f) "bad-lst-ref-5"))
        (test-assert (equal? (bio-read-expr p) '())    "no-emptylist")
        (test-assert (equal? (bio-read-expr p) #f)     "no-false")
        (test-assert (equal? (bio-read-expr p) #t)     "no-true"))
      #:guess-encoding #f
      #:encoding #f
      #:binary #t)))
