(define (test-assert-arrays-equal-gpu arv brv epsilon)
  (test-assert-arrays-equal (map (lambda (rv) (gpu-array rv))
                                 (array->list arv))
                            (map (lambda (rv) (gpu-array rv))
                                 (array->list brv))
                            0.0000002))

(define (test-assert-epsilon a b eps name)
  (test-assert (epsilon? a b eps)
    (format #nil "~a is wrong, got ~a, expected ~a" name a b)))

(define-test (test-net-write/load-arrays)
  (let* ((net (make-net #:in 7 #:out 13 #:hid 53 #:init #t))
         (fname ".tmp-test-arrays")
         (test-array (lambda (arv brv)
           (test-assert-arrays-equal (array->list arv)
                                     (map (lambda (rv) (gpu-array rv))
                                          (array->list brv))
                                     0.0000002))))
    (call-with-output-file fname
      (lambda (p)
        (bio--write-arrays p (netr-arrs net)))
      #:encoding #f #:binary #t)

    (call-with-input-file fname
      (lambda (p)
        (let ((arrs (bio--read-arrays p)))
          (test-array arrs (netr-arrs net))))
      #:guess-encoding #f
      #:encoding #f
      #:binary #t)))

(define-test (test-net-load/save)
  (let* ((in 97)
         (out 13)
         (hid 53)
         (net (make-net #:in in #:out out #:hid hid #:init #t))
         (fname ".tmp-test-net")
         (test-array (lambda (arv brv)
           (test-assert-arrays-equal (map (lambda (rv) (gpu-array rv))
                                          (array->list arv))
                                     (map (lambda (rv) (gpu-array rv))
                                          (array->list brv))
                                     0.0000002))))
    (file-write-net fname 0 net)
    (let ((net2 (file-load-net fname)))
      (test-array (netr-arrs net) (netr-arrs net2)))))

(define-test (test-net-run)
  (let* ((in 2)
         (out 1)
         (hid 2)
         (net (make-net #:in in #:out out #:hid hid #:init #t))
         (arrs (netr-arrs net))
         (vxi (net-vxi net))
         (hw (array-ref arrs 0))
         (yw (array-ref arrs 3))
         (n0w0 0.8) (n0w1 0.4)
         (n1w0 0.2) (n1w1 0.5)
         (n2w0 0.3) (n2w1 0.1)
         ; reference-network
         (refnet (lambda (in)
          (sigmoid-real
           (+ (* n2w0 (sigmoid-real (+ (* n0w0 (array-ref in 0))
                                       (* n0w1 (array-ref in 1)))))
              (* n2w1 (sigmoid-real (+ (* n1w0 (array-ref in 0))
                                       (* n1w1 (array-ref in 1)))))))))
         (compare (lambda (nin)
          (let ((ia (list-ref nin 0))
                (ib (list-ref nin 1)))
            (array-set! vxi (if (eq? ia 'r) (random-uniform) ia) 0)
            (array-set! vxi (if (eq? ia 'r) (random-uniform) ia) 1)
            (net-run net vxi)
            (let* ((vyo (net-vyo net))
                   (a (array-ref vyo 0))
                   (b (refnet vxi))
                   (diff (abs (- a b))))
              (test-assert (epsilon? a b 0.0000001)
                "net-run out=~f diff: ~f, expected out: ~f" a diff b))))))
    ; set weights
    (array-set! (gpu-array hw) n0w0 0 0)
    (array-set! (gpu-array hw) n0w1 0 1)
    (array-set! (gpu-array hw) n1w0 1 0)
    (array-set! (gpu-array hw) n1w1 1 1)
    (array-set! (gpu-array yw) n2w0 0 0)
    (array-set! (gpu-array yw) n2w1 0 1)
    (gpu-dirty-set! hw 1) (gpu-refresh hw)
    (gpu-dirty-set! yw 1) (gpu-refresh yw)
    (loop-for nin in '((0. 0.) (0. 1.) (1. 0.) (1. 1.)
                               (0. .5) (.5 0.) (.5 .5)
                               (0. .1) (.1 0.) (.1 .1)
                               (0. .9) (.9 0.) (.9 .9)) do
      (compare nin))
    (loop-subtests (i) (compare '(r r)))))

(define-test (test-net-update-weights)
  (let* ((in 2)
         (out 1)
         (hid 2)
         (net (make-net #:in in #:out out #:hid hid #:init #t))
         (arrs (netr-arrs net))
         (vxi (net-vxi net))
         (hw (array-ref arrs 0))
         (yw (array-ref arrs 3))
         (alpha 0.1)
         (err 0.4)
         (eps 0.0000001)
         (check-weight (lambda (a b name)
          (test-assert (epsilon? a b eps)
            (format #nil "~a wrong weight, got ~a, expected ~a" name a b)))))
    ; set weights
    (array-set! (gpu-array hw) 0.1 0 0)
    (array-set! (gpu-array hw) 0.3 0 1)
    (array-set! (gpu-array hw) 0.5 1 0)
    (array-set! (gpu-array hw) 0.9 1 1)
    (array-set! (gpu-array yw) 0.6 0 0)
    (array-set! (gpu-array yw) 0.2 0 1)
    (gpu-dirty-set! hw 1) (gpu-refresh hw)
    (gpu-dirty-set! yw 1) (gpu-refresh yw)
    ; run network to ensure update-weights isnt dependent on input/output
    ; only weights + gradients which are invariant to net-run
    (array-set! vxi (random-uniform) 0)
    (array-set! vxi (random-uniform) 1)
    (net-run net vxi)
    ; calculate tderror and back-propagate error
    (let* ((tderr (make-typed-array 'f32 err 1))
           (hgrad (gpu-make-matrix hid in))
           (ograd (gpu-make-vector hid))
           (grads (list (list hgrad)
                        (list ograd))))
      ; manually set gradients (else done by update-eligibility-traces)
      (array-set! (gpu-array hgrad) 0.1 0 0)
      (array-set! (gpu-array hgrad) 0.3 0 1)
      (array-set! (gpu-array hgrad) 0.7 1 0)
      (array-set! (gpu-array hgrad) 0.9 1 1)
      (array-set! (gpu-array ograd) 0.1 0)
      (array-set! (gpu-array ograd) 0.1 1)
      (gpu-dirty-set! hgrad 1)
      (gpu-dirty-set! ograd 1)
      (gpu-refresh hgrad)
      (gpu-refresh ograd)
      (update-weights net alpha tderr grads)
      (gpu-refresh-host hw)
      (gpu-refresh-host yw)
      ; test new weight against old-weight + alpha * tderr * gradient
      (check-weight (array-ref (gpu-array yw) 0 0)
                    (+ 0.6 (* alpha err (array-ref (gpu-array ograd) 0)))
                   "output-neuron-weight-0")
      (check-weight (array-ref (gpu-array yw) 0 1)
                    (+ 0.2 (* alpha err (array-ref (gpu-array ograd) 1)))
                   "output-neuron-weight-1")
      (loop-for parms in '((0 0 0.1) (0 1 0.3) (1 0 0.5) (1 1 0.9)) do
        (match parms
          ((oidx hidx wei)
           (check-weight (array-ref (gpu-array hw) oidx hidx)
                         (+ wei (* alpha err (array-ref (gpu-array hgrad) oidx hidx)))
                         (format #f "hidden-neuron-weight-~a-~a" oidx hidx))))))))

(define-test (test-net-update-eligibility-traces)
  (let* ((in 2)
         (out 1)
         (hid 2)
         (net (make-net #:in in #:out out #:hid hid #:init #t))
         (arrs (netr-arrs net))
         (vxi (net-vxi net))
         (hw (array-ref arrs 0))
         (yw (array-ref arrs 3))
         (alpha 0.1)
         (err 0.4)
         (eps 0.000000000000001))
    ; set weights
    (array-set! (gpu-array hw) 0.1 0 0)
    (array-set! (gpu-array hw) 0.3 0 1)
    (array-set! (gpu-array hw) 0.5 1 0)
    (array-set! (gpu-array hw) 0.9 1 1)
    (array-set! (gpu-array yw) 0.6 0 0)
    (array-set! (gpu-array yw) 0.2 0 1)
    (gpu-dirty-set! hw 1) (gpu-refresh hw)
    (gpu-dirty-set! yw 1) (gpu-refresh yw)
    ; run network to ensure update-weights isnt dependent on input/output
    ; only weights + gradients which are invariant to net-run
    (array-set! vxi 0.4 0) ;(array-set! vxi (random-uniform) 0)
    (array-set! vxi 0.8 1) ;(array-set! vxi (random-uniform) 1)
    ;(format #t "input: ~s~%" vxi)
    (net-run net vxi)
    (gpu-refresh-host (array-ref arrs 1))
    (gpu-refresh-host (array-ref arrs 2))
    ;(format #t "vhz: ~s~%" (gpu-array (array-ref arrs 1)))
    ;(format #t "vha: ~s~%" (gpu-array (array-ref arrs 2)))
    (gpu-refresh-host (array-ref arrs 4))
    (gpu-refresh-host (array-ref arrs 5))
    ;(format #t "vyz: ~s~%" (gpu-array (array-ref arrs 4)))
    ;(format #t "vya: ~s~%" (gpu-array (array-ref arrs 5)))
    ; calculate tderror and back-propagate error
    (let* ((tderr (make-typed-array 'f32 err 1))
           (hgrad (gpu-make-matrix hid in))
           (ograd (gpu-make-vector hid))
           (grads (list (list hgrad)
                        (list ograd))))
      ; manually set gradients (else done by update-eligibility-traces)
      (gpu-array-apply hgrad (lambda (x) 1.))
      (gpu-array-apply ograd (lambda (x) 1.))
      (gpu-refresh-host hgrad)
      (gpu-refresh-host ograd)
      (update-eligibility-traces net grads 0.8)
      (gpu-refresh-host hgrad)
      (gpu-refresh-host ograd)
      ;(format #t "grads: ~s ~s~%" (gpu-array hgrad) (gpu-array ograd))
      (test-assert-epsilon (array-ref (gpu-array hgrad) 0 0) 0.8138797283172607 eps "hgrad-0-0")
      (test-assert-epsilon (array-ref (gpu-array hgrad) 0 1) 0.8277594447135925 eps "hgrad-0-1")
      (test-assert-epsilon (array-ref (gpu-array hgrad) 1 0) 0.8038452863693237 eps "hgrad-1-0")
      (test-assert-epsilon (array-ref (gpu-array hgrad) 1 1) 0.8076905608177185 eps "hgrad-1-1")
      (test-assert-epsilon (array-ref (gpu-array ograd)   0) 0.9343431591987615 eps "ograd-0-0")
      (test-assert-epsilon (array-ref (gpu-array ograd)   1) 0.9686623811721802 eps "ograd-0-1"))))

(define-test (test-net-update-eligibility-traces2)
  (let* ((in 2)
         (out 2)
         (hid 2)
         (net (make-net #:in in #:out out #:hid hid #:init #t))
         (arrs (netr-arrs net))
         (vxi (net-vxi net))
         (hw (array-ref arrs 0))
         (yw (array-ref arrs 3))
         (alpha 0.1)
         (err 0.4)
         (eps 0.000000000000001))
    ; set weights
    (array-set! (gpu-array hw) 0.1 0 0)
    (array-set! (gpu-array hw) 0.3 0 1)
    (array-set! (gpu-array hw) 0.5 1 0)
    (array-set! (gpu-array hw) 0.9 1 1)
    (array-set! (gpu-array yw) 0.6 0 0)
    (array-set! (gpu-array yw) 0.2 0 1)
    (array-set! (gpu-array yw) 0.4 1 0)
    (array-set! (gpu-array yw) 0.7 1 1)
    (gpu-dirty-set! hw 1) (gpu-refresh hw)
    (gpu-dirty-set! yw 1) (gpu-refresh yw)
    ; run network to ensure update-weights isnt dependent on input/output
    ; only weights + gradients which are invariant to net-run
    (array-set! vxi 0.4 0) ;(array-set! vxi (random-uniform) 0)
    (array-set! vxi 0.8 1) ;(array-set! vxi (random-uniform) 1)
    ;(format #t "input: ~s~%" vxi)
    (net-run net vxi)
    (gpu-refresh-host (array-ref arrs 1))
    (gpu-refresh-host (array-ref arrs 2))
    ;(format #t "vhz: ~s~%" (gpu-array (array-ref arrs 1)))
    ;(format #t "vha: ~s~%" (gpu-array (array-ref arrs 2)))
    (gpu-refresh-host (array-ref arrs 4))
    (gpu-refresh-host (array-ref arrs 5))
    ;(format #t "vyz: ~s~%" (gpu-array (array-ref arrs 4)))
    ;(format #t "vya: ~s~%" (gpu-array (array-ref arrs 5)))
    ; calculate tderror and back-propagate error
    (let* ((tderr (make-typed-array 'f32 err 1))
           (hgrad0 (gpu-make-matrix hid in))
           (hgrad1 (gpu-make-matrix hid in))
           (ograd0 (gpu-make-vector hid))
           (ograd1 (gpu-make-vector hid))
           (grads (list (list hgrad0 hgrad1)
                        (list ograd0 ograd1))))
      ; manually set gradients (else done by update-eligibility-traces)
      (gpu-array-apply hgrad0 (lambda (x) 1.))
      (gpu-array-apply hgrad1 (lambda (x) 1.))
      (gpu-array-apply ograd0 (lambda (x) 1.))
      (gpu-array-apply ograd1 (lambda (x) 1.))
      (gpu-refresh-host hgrad0) (gpu-refresh-host hgrad1)
      (gpu-refresh-host ograd0) (gpu-refresh-host ograd1)
      (update-eligibility-traces net grads 0.8)
      (gpu-refresh-host hgrad0) (gpu-refresh-host hgrad1)
      (gpu-refresh-host ograd0) (gpu-refresh-host ograd1)
      ; gradients for output-0
      (test-assert-epsilon (array-ref (gpu-array hgrad0) 0 0) 0.8138797283172607 eps "hgrad0-0-0")
      (test-assert-epsilon (array-ref (gpu-array hgrad0) 0 1) 0.8277594447135925 eps "hgrad0-0-1")
      (test-assert-epsilon (array-ref (gpu-array hgrad0) 1 0) 0.8038452863693237 eps "hgrad0-1-0")
      (test-assert-epsilon (array-ref (gpu-array hgrad0) 1 1) 0.8076905608177185 eps "hgrad0-1-1")
      (test-assert-epsilon (array-ref (gpu-array ograd0)   0) 0.9343431591987615 eps "ograd0-0-0")
      (test-assert-epsilon (array-ref (gpu-array ograd0)   1) 0.9686623811721802 eps "ograd0-0-1")
      ; gradients for output-1
      (test-assert-epsilon (array-ref (gpu-array hgrad1) 0 0) 0.8086140155792236 eps "hgrad1-0-0")
      (test-assert-epsilon (array-ref (gpu-array hgrad1) 0 1) 0.8172280788421631 eps "hgrad1-0-1")
      (test-assert-epsilon (array-ref (gpu-array hgrad1) 1 0) 0.8125288486480713 eps "hgrad1-1-0")
      (test-assert-epsilon (array-ref (gpu-array hgrad1) 1 1) 0.8250576853752136 eps "hgrad1-1-1")
      (test-assert-epsilon (array-ref (gpu-array ograd1)   0) 0.9250638484954834 eps "ograd1-0-0")
      (test-assert-epsilon (array-ref (gpu-array ograd1)   1) 0.9570125341415405 eps "ograd1-0-1"))))

(define-test (test-net-rl-tderr)
  (let* ((in 2)
         (out 2)
         (hid 2)
         (net (make-net #:in in #:out out #:hid hid #:init #t))
         (arrs (netr-arrs net))
         (vxi (net-vxi net))
         (hw (array-ref arrs 0))
         (yw (array-ref arrs 3))
         (alpha 0.1)
         (err 0.4)
         (eps 0.000000000000001)
         (conf '((rl-lam . 0.95)
                 (rl-gam . 0.95)
                 (alpha  . 0.10)))
         (rl (new-rl conf net)))
    ; set weights
    (array-set! (gpu-array hw) 0.1 0 0) (array-set! (gpu-array hw) 0.3 0 1)
    (array-set! (gpu-array hw) 0.5 1 0) (array-set! (gpu-array hw) 0.9 1 1)
    (array-set! (gpu-array yw) 0.6 0 0) (array-set! (gpu-array yw) 0.2 0 1)
    (array-set! (gpu-array yw) 0.4 1 0) (array-set! (gpu-array yw) 0.7 1 1)
    (gpu-dirty-set! hw 1) (gpu-refresh hw)
    (gpu-dirty-set! yw 1) (gpu-refresh yw)
    (array-set! vxi 0.2 0)
    (array-set! vxi 0.8 1)
    (net-run net vxi)
    (gpu-refresh-host (array-ref arrs 1)) ; vhz
    (gpu-refresh-host (array-ref arrs 2)) ; vho
    (gpu-refresh-host (array-ref arrs 4)) ; vyz
    (gpu-refresh-host (array-ref arrs 5)) ; vyo
    (rl-episode-clear rl)
    (let ((reward (make-array 0.8 2)))
      (run-tderr reward rl #t))
    (gpu-refresh-host hw) (gpu-refresh-host yw)
    ; ensure network weights has changed correctly
    (let ((hw (gpu-array hw))
          (yw (gpu-array yw)))
      (test-assert-epsilon (array-ref hw 0 0) 0.10090512037277222 eps "hw-0-0")
      (test-assert-epsilon (array-ref hw 0 1) 0.30362048745155334 eps "hw-0-1")
      (test-assert-epsilon (array-ref hw 1 0) 0.50068563222885132 eps "hw-1-0")
      (test-assert-epsilon (array-ref hw 1 1) 0.90274238586425784 eps "hw-1-1")
      (test-assert-epsilon (array-ref yw 0 0) 0.61067324876785282 eps "yw-0-0")
      (test-assert-epsilon (array-ref yw 0 1) 0.21312303841114044 eps "yw-0-1")
      (test-assert-epsilon (array-ref yw 1 0) 0.40997543931007385 eps "yw-1-0")
      (test-assert-epsilon (array-ref yw 1 1) 0.71226507425308234 eps "yw-1-1"))))
