(define (test-assert-arrays-equal-gpu arv brv epsilon)
  (test-assert-arrays-equal (map (lambda (rv) (gpu-array rv))
                                 (array->list arv))
                            (map (lambda (rv) (gpu-array rv))
                                 (array->list brv))
                            0.0000002))

(define-test (test-net-write/load-arrays)
  (let* ((net (make-net #:in 7 #:out 13 #:hid 53 #:init #t))
         (fname ".tmp-test-arrays")
         (test-array (lambda (arv brv)
           (test-assert-arrays-equal (array->list arv)
                                     (map (lambda (rv) (gpu-array rv))
                                          (array->list brv))
                                     0.0000002))))
    (call-with-output-file fname
      (lambda (p)
        (bio--write-arrays p (netr-arrs net)))
      #:encoding #f #:binary #t)

    (call-with-input-file fname
      (lambda (p)
        (let ((arrs (bio--read-arrays p)))
          (test-array arrs (netr-arrs net))))
      #:guess-encoding #f
      #:encoding #f
      #:binary #t)))

(define-test (test-net-load/save)
  (let* ((in 97)
         (out 13)
         (hid 53)
         (net (make-net #:in in #:out out #:hid hid #:init #t))
         (fname ".tmp-test-net")
         (test-array (lambda (arv brv)
           (test-assert-arrays-equal (map (lambda (rv) (gpu-array rv))
                                          (array->list arv))
                                     (map (lambda (rv) (gpu-array rv))
                                          (array->list brv))
                                     0.0000002))))
    (file-write-net fname 0 net)
    (let ((net2 (file-load-net fname)))
      (test-array (netr-arrs net) (netr-arrs net2)))))

(define-test (test-net-run)
  (let* ((in 2)
         (out 1)
         (hid 2)
         (net (make-net #:in in #:out out #:hid hid #:init #t))
         (arrs (netr-arrs net))
         (vxi (net-vxi net))
         (hw (array-ref arrs 0))
         (yw (array-ref arrs 3))
         (n0w0 0.8) (n0w1 0.4)
         (n1w0 0.2) (n1w1 0.5)
         (n2w0 0.3) (n2w1 0.1)
         ; reference-network
         (refnet (lambda (in)
          (sigmoid-real
           (+ (* n2w0 (sigmoid-real (+ (* n0w0 (array-ref in 0))
                                       (* n0w1 (array-ref in 1)))))
              (* n2w1 (sigmoid-real (+ (* n1w0 (array-ref in 0))
                                       (* n1w1 (array-ref in 1)))))))))
         (compare (lambda (nin)
          (let ((ia (list-ref nin 0))
                (ib (list-ref nin 1)))
            (array-set! vxi (if (eq? ia 'r) (random-uniform) ia) 0)
            (array-set! vxi (if (eq? ia 'r) (random-uniform) ia) 1)
            (net-run net vxi)
            (let* ((vyo (net-vyo net))
                   (a (array-ref vyo 0))
                   (b (refnet vxi))
                   (diff (abs (- a b))))
              (test-assert (epsilon? a b 0.0000001)
                "net-run out=~f diff: ~f, expected out: ~f" a diff b))))))
    ; set weights
    (array-set! (gpu-array hw) n0w0 0 0)
    (array-set! (gpu-array hw) n0w1 0 1)
    (array-set! (gpu-array hw) n1w0 1 0)
    (array-set! (gpu-array hw) n1w1 1 1)
    (array-set! (gpu-array yw) n2w0 0 0)
    (array-set! (gpu-array yw) n2w1 0 1)
    (gpu-refresh hw)
    (gpu-refresh yw)
    (loop-for nin in '((0. 0.) (0. 1.) (1. 0.) (1. 1.)
                               (0. .5) (.5 0.) (.5 .5)
                               (0. .1) (.1 0.) (.1 .1)
                               (0. .9) (.9 0.) (.9 .9)) do
      (compare nin))
    (loop-subtests (i) (compare '(r r)))))

